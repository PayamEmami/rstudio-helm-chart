{{ if .Values.create_pvc }}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{.Values.rstudio_pvc}}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{.Values.rstudio_pvc_capacity}}
{{ end }}
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: rstudio
  labels:
    app: phenomenal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: phenomenal
      task: rstudio
  template:
    metadata:
      labels:
        app: phenomenal
        task: rstudio
    spec:
      containers:
      - name: rstudio
        image: {{.Values.rstudio_image_registry}}{{.Values.rstudio_image}}{{.Values.rstudio_image_tag}}
        {{ if .Values.passwd_rstudio }}
        env:
            - name: "rstudioPWD"
              value: {{.Values.passwd_rstudio}}
        {{ end }}
        ports:
          - containerPort: {{.Values.rstudio_internal_port}}
        resources:
          requests:
            memory: {{.Values.rstudio_resource_req_memory}}
            cpu: {{.Values.rstudio_resource_req_cpu}}
          limits:
            memory: {{.Values.rstudio_resource_limits_memory}}
            cpu: {{.Values.rstudio_resource_limits_cpu}}
{{ if .Values.rstudio_pvc }}
        volumeMounts:
          - mountPath: {{.Values.rstudio_mount_path}}
            name: shared-volume
            subPath: rstudio
      volumes:
        - name: shared-volume
          persistentVolumeClaim:
            claimName: {{.Values.rstudio_pvc}}
{{ end }}
      restartPolicy: Always
            
---
apiVersion: v1
kind: Service
metadata:
  name: rstudio
spec:
  {{ if not .Values.use_ingress }}
  type: NodePort
  {{ end }}
  ports:
  - name: http
    targetPort: 8888
    port: {{.Values.rstudio_internal_port}}
    {{ if not .Values.use_ingress }}
    nodePort: {{.Values.rstudio_node_port_exposed}}
    {{ end }}
  selector:
    app: phenomenal
    task: rstudio

{{ if .Values.use_ingress }}
{{ if not .Values.external_ingress_controller }}
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: default-http-backend
spec:
  replicas: 1
  selector:
    app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60      
      containers:
      - name: default-http-backend
        # Any image is permissable as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---
# create a service for the default backend
apiVersion: v1
kind: Service
metadata:
  labels:
    app: default-http-backend
  name: default-http-backend
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: default-http-backend
  sessionAffinity: None
  type: ClusterIP
---
# Replication controller for the load balancer
apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx-ingress-controller
  labels:
    k8s-app: nginx-ingress-lb
spec:
  replicas: 1
  selector:
    k8s-app: nginx-ingress-lb
  template:
    metadata:
      labels:
        k8s-app: nginx-ingress-lb
        name: nginx-ingress-lb
    spec:
      terminationGracePeriodSeconds: 60      
      containers:
      - image: gcr.io/google_containers/nginx-ingress-controller:0.8.2
        name: nginx-ingress-lb
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10249
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        # use downward API
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
        - containerPort: 80
          hostPort: 80
        - containerPort: 443
          hostPort: 443
        args:
        - /nginx-ingress-controller
        - --default-backend-service=default/default-http-backend
{{ end }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: rstudio-ingress
spec:
  rules:
  - host: {{.Values.hostname}}.{{.Values.domain}}
    http:
      paths:
      - path: /
        backend:
          serviceName: rstudio
          servicePort: http
{{ end }}
